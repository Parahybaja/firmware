// -----FreeRTOS objects-----
TaskHandle_t th_sensor_3;         // sensor 3 task handler
TaskHandle_t th_sensor_4;         // sensor 4 task handler
TaskHandle_t th_display_control;  // display control task handler
TaskHandle_t th_SD;               // 
TaskHandle_t th_send_pack;        // 
SemaphoreHandle_t sh_SD;          //
SemaphoreHandle_t sh_global_vars; //
QueueHandle_t qh_sensor_1;        //
QueueHandle_t qh_sensor_2;        //
QueueHandle_t qh_sensor_3;        //
QueueHandle_t qh_sensor_4;        //

// -----command lookup table-----
typedef enum {
    CMD_NULL,     /*empty command*/
    CMD_START,    /*start command*/
    CMD_STOP,     /*stop command*/
    CMD_NEW_FILE, /*new file command*/
    CMD_RESTART   /*restart command*/
} commands_t;

// -----board ID secret values-----
typedef enum {
    BOARD_01 = 0x7CE, /*1998*/
    BOARD_02 = 0x7CF, /*1998 + 1*/
    BOARD_03 = 0x7D0  /*1998 + 2*/
} boardID_t;

typedef enum {
    SENSOR_01,
    SENSOR_02,
    SENSOR_03,
    SENSOR_04
} sensors_t;

typedef struct {
    boardID_t id;
    float sensor_1;
    float sensor_2;
    float sensor_3;
    float sensor_4;
} system_t;

// -----debug data type definition-----
typedef struct {
    boardID_t id;
    char msg[ESPNOW_BUFFER_SIZE];
} debug_t;

// -----espnow command data type
typedef struct {
    boardID_t id;
    commands_t command;
} cmd_t;

// -----sensor data type definition-----
typedef struct {
    boardID_t id;
    sensors_t type;
    float value;  // sensor data must be float due to a bug in writing to the sd card
} sensor_t;

// -----SD card variables-----
String file_title = FILE; // init default value
String file_name = "max_length";    // current file name generated by the system (don't change)

// -----system run time data-----
system_t system_global = {
    .id = BOARDID,
    .sensor_1 = 0.0,
    .sensor_2 = 0.0,
    .sensor_3 = 0.0,
    .sensor_4 = 0.0
};

// -----SPI pointers-----
SPIClass * vspi = NULL;
SPIClass * hspi = NULL;